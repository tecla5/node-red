{"version":3,"sources":["mode-jsonata.js"],"names":["define","require","exports","module","oop","TextHighlightRules","WorkerClient","jsonataFunctions","Object","keys","jsonata","functions","sort","A","B","length","join","replace","JSONataHighlightRules","keywordMapper","createKeywordMapper","$rules","token","regex","next","defaultToken","inherits","TextMode","Mode","HighlightRules","createWorker","session","worker","attachToDocument","getDocument","on","e","setAnnotations","data","clearAnnotations","$id","call","prototype"],"mappings":"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","file":"mode-jsonata.es5.js","sourcesContent":["define(\"ace/mode/jsonata\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\",\"ace/worker/worker_client\",\"ace/mode/text\"], function(require, exports, module) {\n\n    \"use strict\";\n\n    var oop = require(\"../lib/oop\");\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n    var WorkerClient = require(\"../worker/worker_client\").WorkerClient;\n    var jsonataFunctions = Object.keys(jsonata.functions);\n    // sort in length order (long->short) otherwise substringAfter gets matched\n    // as substring etc.\n    jsonataFunctions.sort(function(A,B) {\n        return B.length-A.length;\n    });\n    jsonataFunctions = jsonataFunctions.join(\"|\").replace(/\\$/g,\"\\\\$\");\n\n    var JSONataHighlightRules = function() {\n\n        var keywordMapper = this.createKeywordMapper({\n            \"keyword.operator\":\n            \"and|or|in\",\n            \"constant.language\":\n            \"null|Infinity|NaN|undefined\",\n            \"constant.language.boolean\":\n            \"true|false\",\n            \"storage.type\":\n            \"function\"\n        }, \"identifier\");\n        this.$rules = {\n            \"start\" : [\n                {\n                    token : \"string\",\n                    regex : \"'(?=.)\",\n                    next  : \"qstring\"\n                },\n                {\n                    token : \"string\",\n                    regex : '\"(?=.)',\n                    next  : \"qqstring\"\n                },\n                {\n                    token : \"constant.numeric\", // hex\n                    regex : /0(?:[xX][0-9a-fA-F]+|[bB][01]+)\\b/\n                },\n                {\n                    token : \"constant.numeric\", // float\n                    regex : /[+-]?\\d[\\d_]*(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b/\n                },\n                {   token: \"keyword\",\n                regex: /Î»/\n            },\n            {\n                token: \"keyword\",\n                regex: jsonataFunctions\n            },\n            {\n                token : keywordMapper,\n                regex : \"[a-zA-Z\\\\$_\\u00a1-\\uffff][a-zA-Z\\\\d\\\\$_\\u00a1-\\uffff]*\"\n            },\n            {\n                token : \"punctuation.operator\",\n                regex : /[.](?![.])/\n            },\n            {\n                token : \"keyword.operator\",\n                regex : /\\|\\||<=|>=|\\.\\.|\\*\\*|!=|:=|[=<>`!$%&*+\\-~\\/^]/,\n                next  : \"start\"\n            },\n            {\n                token : \"punctuation.operator\",\n                regex : /[?:,;.]/,\n                next  : \"start\"\n            },\n            {\n                token : \"paren.lparen\",\n                regex : /[\\[({]/,\n                    next  : \"start\"\n                },\n                {\n                    token : \"paren.rparen\",\n                    regex : /[\\])}]/\n                }\n            ],\n            \"qqstring\" : [\n                {\n                    token : \"string\",\n                    regex : '\"|$',\n                    next  : \"start\"\n                }, {\n                    defaultToken: \"string\"\n                }\n            ],\n            \"qstring\" : [\n                {\n                    token : \"string\",\n                    regex : \"'|$\",\n                    next  : \"start\"\n                }, {\n                    defaultToken: \"string\"\n                }\n            ]\n        };\n    };\n\n    oop.inherits(JSONataHighlightRules, TextHighlightRules);\n\n    var TextMode = require(\"./text\").Mode;\n    var Mode = function() {\n        this.HighlightRules = JSONataHighlightRules;\n    };\n    oop.inherits(Mode, TextMode);\n\n\n    (function() {\n        this.createWorker = function(session) {\n            var worker = new WorkerClient([\"ace\"], \"ace/mode/jsonata_worker\", \"JSONataWorker\");\n            worker.attachToDocument(session.getDocument());\n\n            worker.on(\"annotate\", function(e) {\n                session.setAnnotations(e.data);\n            });\n\n            worker.on(\"terminate\", function() {\n                session.clearAnnotations();\n            });\n\n            return worker;\n        };\n        this.$id = \"ace/mode/jsonata\";\n    }).call(Mode.prototype);\n\n    exports.Mode = Mode;\n\n});\n"]}